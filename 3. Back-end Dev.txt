* 회원 관리 예제


1. 비즈니스 요구사항 정리 (가정)
	- 데이터:	회원ID, 이름
	- 기능:	회원등록, 조회
	- 데이터 저장소 선별 x

* 일반적인 웹 애플리케이션 계층 구조
	컨트롤러 -> 서비스 -> 리포지토리 -> DB
		   ↓
	      ↘	 도메인    ↙

	컨트롤러:	웹 MVC의 컨트롤러 역할
	서비스:	비즈니스 로직 구현
	리포지토리:	데이터베이스 접근, 도메인 객체를 DB에 저장, 관리
	도메인:	회원, 주문, 구폰 등 데이터베이스에 저장되고 관리되는 객체들

* 클래스 의존 관계
	MemberService	->	interface (MemberRepository)	<-	(Memory MemberRepository)
	- 아직 데이터 저장소가 선정x, 인터페이스로 구현 클래스를 변경할 수 있도록 설계
	- DB 는 다양한 저장소를 고민중
	- 개발을 진행하기 위해 초기 개발 단계에서는 구현체로 가벼운 메모리 기반의 데이터 저장소 사용

_________________________________________________________________________________________________________________

* 회원 레포지토리 테스트 케이스 작성
	- main 메서드를 통해 실행하거나, 웹 어플리케이션의 컨트롤러를 통해 기능 실행	// 실행에 오래걸리고, 반복실행 어렵다
	*** JUnit 이라는 프레임워크로 테스트를 실행

* Test 파일에 똑같이 repository 패키지를 만들고 그 안에 테스트 클래스를 만든다. (보통 이름을 테스트하고싶은 클래스 + Test 로 정한다)
* 테스트하고싶은 클래스의 객체를 만든다.
	ex)	MemberRepository repository = new MemoryMemberRepository();
* @Test 어노테이션을 붙이고 테스트를 하고 싶은 메소드를 적은후 실행하면 된다
	ex)	@Test
		public void save() {	...    }

* @AfterEach 어노테이션을 붙이고 afterEach() 메소드를 만들어 한개의 테스트를 실행할 때마다 레포지토리를 초기화 시켜서
  한번에 여러개 테스트할때 중복 오류 없이 실행 가능하다

_________________________________________________________________________________________________________________